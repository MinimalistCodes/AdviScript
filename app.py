import streamlit as st
from langchain_google_genai import GoogleGenerativeAI
from langchain_core.prompts import PromptTemplate
from dotenv import load_dotenv
import os, sys


# Load environment variables
load_dotenv()

# Configure Google Gemini API - Remove this section as we will use langchain
# google_genai = GoogleGenAI(api_key=os.getenv("GOOGLE_API_KEY"))
GOOLGE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Function to generate the cold call script
def cold_script(industry):
    return f"""
Please generate a cold call script tailored for a sales representative calling potential customers in the {industry} industry. Include a structured call-flow, handle objections, and provide rebuttals both implied and explicitly handled within the script. The script should aim to engage prospects effectively, highlight key benefits of our product/service, and encourage further conversation or action.
"""

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# UI and Chat Logic
st.set_page_config(page_title='Advi Script', layout='wide')
st.title('Advi Script')
st.markdown("An AI-powered chatbot designed to provide expert advice in the sales industry.")

#Conversational chatbot that will develop sales scripts for the user

#Conversation always on top. Chatbot speaks first
if st.session_state.messages == []:
    st.session_state.messages.append({"role": "assistant", "content": "Hello! I'm Advi Script, your AI-powered sales script assistant. How can I help you today?"})

#Display script always in the middle of the screen
st.sidebar.title('Script')
st.sidebar.markdown("Here's the script generated by Advi Script:")
st.sidebar.write("")
#Display the script
for message in st.session_state.messages:
    if message["role"] == "assistant":
        st.sidebar.markdown(f"**Advi Script:** {message['content']}")
    else:
        st.sidebar.markdown(f"**You:** {message['content']}")
    st.sidebar.write("")

#User input always at the bottom
user_input = st.text_input("You:", "Write your message here...")

#Send button
if st.button("Send"):
        #Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": user_input})
    
    #Generate cold call script
    if "cold call" in user_input:
        st.session_state.messages.append({"role": "assistant", "content": cold_script("technology")})
    
    #Generate sales script
    else:
        # Initialize the Google Generative AI
        google_genai = GoogleGenerativeAI(api_key=GOOLGE_API_KEY)
        # Generate the sales script
        prompt = PromptTemplate(user_input)
        response = google_genai.generate_text(prompt)
        st.session_state.messages.append({"role": "assistant", "content": response})
        
    #Clear user input
    user_input = "Write your message here..."
    
#Clear button
if st.button("Clear Chat"):
    st.session_state.messages = []
    user_input = "Write your message here..."


